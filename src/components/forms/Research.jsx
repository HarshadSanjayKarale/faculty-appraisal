import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";
import { ClipLoader } from "react-spinners";

const SectionCard = ({ title, icon, borderColor, children }) => (
  <div
    className={`bg-white rounded-lg shadow-md p-6 border-l-4 ${borderColor} hover:shadow-lg transition-all duration-300`}
  >
    <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-3">
      <span className="text-2xl">{icon}</span>
      {title}
    </h3>
    {children}
  </div>
);

const ScoreCard = ({ label, score, verifiedScore, total }) => (
  <div className="mt-4 p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg shadow-sm">
    <div className="flex items-center justify-between mb-2">
      <span className="font-medium text-gray-700">{label}:</span>
      <span className="text-lg font-bold text-blue-600">
        {score} / {total}
      </span>
    </div>
    {verifiedScore !== undefined && (
      <div className="flex items-center justify-between text-sm">
        <span className="text-gray-600">Verified Score:</span>
        <span className="font-medium text-green-600">{verifiedScore}</span>
      </div>
    )}
  </div>
);

const InputField = ({
  label,
  name,
  type = "number",
  value,
  onChange,
  placeholder,
  proof,
  onProofChange,
}) => (
  <div className="space-y-2">
    <label className="block text-sm font-medium text-gray-700">{label}</label>
    <div className="flex gap-4">
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        min="0"
        onKeyDown={(e) => {
          if (e.key === "-") {
            e.preventDefault();
          }
        }}
        onWheel={(e) => e.target.blur()}
        className="block w-full px-4 py-2 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
      />
      <input
        type="url"
        value={proof}
        onChange={(e) => onProofChange(name, e.target.value)}
        placeholder="Drive link for proof"
        className="block w-full px-4 py-2 rounded-md border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
      />
    </div>
  </div>
);

const Research = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();
  const userData = JSON.parse(localStorage.getItem("userData"));

  const [formData, setFormData] = useState({
    // Papers and Publications
    sciPapers: 0,
    esciPapers: 0,
    scopusPapers: 0,
    ugcPapers: 0,
    otherPapers: 0,

    // Conference Papers
    scopusConference: 0,
    otherConference: 0,

    // Book Chapters
    scopusChapter: 0,
    otherChapter: 0,

    // Books
    scopusBooks: 0,
    nationalBooks: 0,
    localBooks: 0,

    // Citations
    wosCitations: 0,
    scopusCitations: 0,
    googleCitations: 0,

    // Patents
    patentCommercialized: 0,
    patentGranted: 0,
    patentCollege: 0,
    patentCollegeGranted: 0,

    // Training and Revenue
    trainingRevenue: 0,
    nonResearchGrant: 0,

    // Products
    productCommercialized: 0,
    productDeveloped: 0,
    pocDeveloped: 0,

    // Awards
    internationalAward: 0,
    governmentAward: 0,
    nationalAward: 0,
    internationalFellowship: 0,
    nationalFellowship: 0,

    // Grants and Revenue
    researchGrants: 0,
    consultancyRevenue: 0,
    patentCommercialRevenue: 0,
    productCommercialRevenue: 0,
    startupRevenue: 0,
    startupFunding: 0,

    // PCCOE-CIIL Startup fields
    startupRevenuePCCOE: 0, // Revenue generated by startup
    startupFundingPCCOE: 0, // Funding received
    startupProductsPCCOE: 0, // Products developed
    startupPOCPCCOE: 0, // POCs developed
    startupRegisteredPCCOE: 0, // Number of startups registered

    // Industry Interaction
    activeMOU: 0, // Number of active MOUs
    labDevelopment: 0, // Number of labs developed with industry

    // Industry Internship/Placement
    industryInternshipPlacement: 0, // Number of internships/placements
  });

  const [proofLinks, setProofLinks] = useState({});
  const [verifiedScores, setVerifiedScores] = useState({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userData = JSON.parse(localStorage.getItem("userData"));
        const department = userData.dept;
        const user_id = userData._id;

        const response = await fetch(
          `http://127.0.0.1:5000/${department}/${user_id}/B`
        );

        if (!response.ok) {
          throw new Error("Failed to fetch data");
        }

        const data = await response.json();

        // Update form data with fetched values
        setFormData({
          // Papers and Publications
          sciPapers: data.papers.sci.count || 0,
          esciPapers: data.papers.esci.count || 0,
          scopusPapers: data.papers.scopus.count || 0,
          ugcPapers: data.papers.ugc.count || 0,
          otherPapers: data.papers.other.count || 0,

          // Conference Papers
          scopusConference: data.conferences.scopus.count || 0,
          otherConference: data.conferences.other.count || 0,

          // Book Chapters
          scopusChapter: data.bookChapters.scopus.count || 0,
          otherChapter: data.bookChapters.other.count || 0,

          // Books
          scopusBooks: data.books.scopus.count || 0,
          nationalBooks: data.books.national.count || 0,
          localBooks: data.books.local.count || 0,

          // Citations
          wosCitations: data.citations.wos.count || 0,
          scopusCitations: data.citations.scopus.count || 0,
          googleCitations: data.citations.google.count || 0,

          // Patents
          patentCommercialized: data.patents.individualCommercialized.count || 0,
          patentGranted: data.patents.individualGranted.count || 0,
          patentCollege: data.patents.collegeCommercialized.count || 0,
          patentCollegeGranted: data.patents.collegeGranted.count || 0,

          // Training and Revenue
          trainingRevenue: data.training.revenue.amount || 0,
          nonResearchGrant: data.nonResearchGrants.amount.value || 0,

          // Products
          productCommercialized: data.products.commercialized.count || 0,
          productDeveloped: data.products.developed.count || 0,
          pocDeveloped: data.products.poc.count || 0,

          // Awards
          internationalAward: data.awards.international.count || 0,
          governmentAward: data.awards.government.count || 0,
          nationalAward: data.awards.national.count || 0,
          internationalFellowship: data.awards.internationalFellowship.count || 0,
          nationalFellowship: data.awards.nationalFellowship.count || 0,

          // Grants and Revenue
          researchGrants: data.grantsAndRevenue.researchGrants.amount || 0,
          consultancyRevenue: data.grantsAndRevenue.consultancyRevenue.amount || 0,
          patentCommercialRevenue: data.grantsAndRevenue.patentCommercialRevenue.amount || 0,
          productCommercialRevenue: data.grantsAndRevenue.productCommercialRevenue.amount || 0,
          startupRevenue: data.grantsAndRevenue.startupRevenue.amount || 0,
          startupFunding: data.grantsAndRevenue.startupFunding.amount || 0,

          // PCCOE-CIIL Startup
          startupRevenuePCCOE: data.startupPCCOE.revenue.amount || 0,
          startupFundingPCCOE: data.startupPCCOE.funding.amount || 0,
          startupProductsPCCOE: data.startupPCCOE.products.count || 0,
          startupPOCPCCOE: data.startupPCCOE.poc.count || 0,
          startupRegisteredPCCOE: data.startupPCCOE.registered.count || 0,

          // Industry Interaction
          activeMOU: data.industryInteraction.activeMOU.count || 0,
          labDevelopment: data.industryInteraction.labDevelopment.count || 0,

          // Industry Internship/Placement
          industryInternshipPlacement: data.industryAssociation.internshipsAndPlacements.count || 0,
        });

        // Set proof links with fetched values
        setProofLinks({
          sciPapers: data.papers.sci.proof || "",
          esciPapers: data.papers.esci.proof || "",
          scopusPapers: data.papers.scopus.proof || "",
          ugcPapers: data.papers.ugc.proof || "",
          otherPapers: data.papers.other.proof || "",
          scopusConference: data.conferences.scopus.proof || "",
          otherConference: data.conferences.other.proof || "",
          scopusChapter: data.bookChapters.scopus.proof || "",
          otherChapter: data.bookChapters.other.proof || "",
          scopusBooks: data.books.scopus.proof || "",
          nationalBooks: data.books.national.proof || "",
          localBooks: data.books.local.proof || "",
          wosCitations: data.citations.wos.proof || "",
          scopusCitations: data.citations.scopus.proof || "",
          googleCitations: data.citations.google.proof || "",
          patentCommercialized: data.patents.individualCommercialized.proof || "",
          patentGranted: data.patents.individualGranted.proof || "",
          patentCollege: data.patents.collegeCommercialized.proof || "",
          patentCollegeGranted: data.patents.collegeGranted.proof || "",
          trainingRevenue: data.training.revenue.proof || "",
          nonResearchGrant: data.nonResearchGrants.amount.proof || "",
          productCommercialized: data.products.commercialized.proof || "",
          productDeveloped: data.products.developed.proof || "",
          pocDeveloped: data.products.poc.proof || "",
          internationalAward: data.awards.international.proof || "",
          governmentAward: data.awards.government.proof || "",
          nationalAward: data.awards.national.proof || "",
          internationalFellowship: data.awards.internationalFellowship.proof || "",
          nationalFellowship: data.awards.nationalFellowship.proof || "",
          researchGrants: data.grantsAndRevenue.researchGrants.proof || "",
          consultancyRevenue: data.grantsAndRevenue.consultancyRevenue.proof || "",
          patentCommercialRevenue: data.grantsAndRevenue.patentCommercialRevenue.proof || "",
          productCommercialRevenue: data.grantsAndRevenue.productCommercialRevenue.proof || "",
          startupRevenue: data.grantsAndRevenue.startupRevenue.proof || "",
          startupFunding: data.grantsAndRevenue.startupFunding.proof || "",
          startupRevenuePCCOE: data.startupPCCOE.revenue.proof || "",
          startupFundingPCCOE: data.startupPCCOE.funding.proof || "",
          startupProductsPCCOE: data.startupPCCOE.products.proof || "",
          startupPOCPCCOE: data.startupPCCOE.poc.proof || "",
          startupRegisteredPCCOE: data.startupPCCOE.registered.proof || "",
          activeMOU: data.industryInteraction.activeMOU.proof || "",
          labDevelopment: data.industryInteraction.labDevelopment.proof || "",
          industryInternshipPlacement: data.industryAssociation.internshipsAndPlacements.proof || "",
        });

      } catch (error) {
        console.error("Error fetching data:", error);
        alert("Failed to load research data");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleProofChange = (field, link) => {
    setProofLinks((prev) => ({
      ...prev,
      [field]: link,
    }));
  };

  const calculatePapersScore = () => {
    const sciScore = Number(formData.sciPapers) * 100;
    const esciScore = Number(formData.esciPapers) * 50;
    const scopusScore = Number(formData.scopusPapers) * 50;
    const ugcScore = Number(formData.ugcPapers) * 10;
    const otherScore = Number(formData.otherPapers) * 5;
    return sciScore + esciScore + scopusScore + ugcScore + otherScore;
  };

  const calculateConferenceScore = () => {
    const scopusScore = Number(formData.scopusConference) * 30;
    const otherScore = Number(formData.otherConference) * 5;
    return Math.min(180, scopusScore + otherScore);
  };

  const calculateBookChapterScore = () => {
    const scopusScore = Number(formData.scopusChapter) * 30;
    const otherScore = Number(formData.otherChapter) * 5;
    return Math.min(150, scopusScore + otherScore);
  };

  const calculateBookScore = () => {
    const scopusScore = Number(formData.scopusBooks) * 100;
    const nationalScore = Number(formData.nationalBooks) * 30;
    const localScore = Number(formData.localBooks) * 10;
    return Math.min(200, scopusScore + nationalScore + localScore);
  };

  const calculateCitationScore = () => {
    const wosScore = Math.floor(Number(formData.wosCitations) / 3) * 3;
    const scopusScore = Math.floor(Number(formData.scopusCitations) / 3) * 3;
    const googleScore = Math.floor(Number(formData.googleCitations) / 3);
    return Math.min(50, wosScore + scopusScore + googleScore);
  };

  const calculatePatentScore = () => {
    const individualCommScore = Number(formData.patentCommercialized) * 20;
    const individualGrantScore = Number(formData.patentGranted) * 15;
    const collegeCommScore = Number(formData.patentCollege) * 100;
    const collegeGrantScore = Number(formData.patentCollegeGranted) * 30;
    return Math.min(
      220,
      individualCommScore +
        individualGrantScore +
        collegeCommScore +
        collegeGrantScore
    );
  };

  const calculateTrainingScore = () => {
    return Math.min(40, Number(formData.trainingRevenue) * 5);
  };

  const calculateNonResearchScore = () => {
    return Math.min(40, Number(formData.nonResearchGrant) * 5);
  };

  const calculateProductScore = () => {
    const commercializedScore = Number(formData.productCommercialized) * 100;
    const developedScore = Number(formData.productDeveloped) * 40;
    const pocScore = Number(formData.pocDeveloped) * 10;
    return Math.min(100, commercializedScore + developedScore + pocScore);
  };

  const calculateAwardScore = () => {
    const intAwardScore = Number(formData.internationalAward) * 30;
    const govtAwardScore = Number(formData.governmentAward) * 20;
    const natAwardScore = Number(formData.nationalAward) * 5;
    const intFellowScore = Number(formData.internationalFellowship) * 50;
    const natFellowScore = Number(formData.nationalFellowship) * 30;
    return Math.min(
      50,
      intAwardScore +
        govtAwardScore +
        natAwardScore +
        intFellowScore +
        natFellowScore
    );
  };

  const calculateGrantsAndRevenueScore = () => {
    const researchGrantScore =
      Math.floor(Number(formData.researchGrants) / 2) * 10; // 10 marks per 2 lakhs
    const consultancyScore =
      Math.floor(Number(formData.consultancyRevenue) / 2) * 10;
    const patentRevenueScore =
      Math.floor(Number(formData.patentCommercialRevenue) / 2) * 10;
    const productRevenueScore =
      Math.floor(Number(formData.productCommercialRevenue) / 2) * 10;
    const startupRevenueScore =
      Math.floor(Number(formData.startupRevenue) / 2) * 10;
    const startupFundingScore =
      Math.floor(Number(formData.startupFunding) / 2) * 10;

    return (
      researchGrantScore +
      consultancyScore +
      patentRevenueScore +
      productRevenueScore +
      startupRevenueScore +
      startupFundingScore
    );
  };

  const calculateStartupPCCOEScore = () => {
    const revenueScore = Number(formData.startupRevenuePCCOE) >= 0.5 ? 100 : 0; // 100 marks if revenue > 50k
    const fundingScore = Number(formData.startupFundingPCCOE) >= 5 ? 100 : 0; // 100 marks if funding > 5 Lakhs
    const productsScore = Number(formData.startupProductsPCCOE) * 40; // 40 marks per product
    const pocScore = Number(formData.startupPOCPCCOE) * 10; // 10 marks per POC
    const registrationScore = Number(formData.startupRegisteredPCCOE) * 5; // 5 marks per startup registration

    return (
      revenueScore + fundingScore + productsScore + pocScore + registrationScore
    );
  };

  const calculateIndustryInteractionScore = () => {
    const mouScore = Number(formData.activeMOU) * 10; // 10 marks per active MOU
    const labScore = Number(formData.labDevelopment) * 20; // 20 marks per lab development
    return mouScore + labScore;
  };

  const calculateIndustryAssociationScore = () => {
    return Number(formData.industryInternshipPlacement) * 10; // 10 marks per internship/placement
  };

  const calculateTotalScore = () => {
    const rawScore =
      calculatePapersScore() +
      calculateConferenceScore() +
      calculateBookChapterScore() +
      calculateBookScore() +
      calculateCitationScore() +
      calculatePatentScore() +
      calculateTrainingScore() +
      calculateNonResearchScore() +
      calculateProductScore() +
      calculateAwardScore() +
      calculateGrantsAndRevenueScore() +
      calculateStartupPCCOEScore() +
      calculateIndustryInteractionScore() +
      calculateIndustryAssociationScore();

    // Apply role-based limits
    const role = userData.role;
    const maxScores = {
      Professor: 370,
      "Associate Professor": 300,
      "Assistant Professor": 210,
    };

    const maxScore = maxScores[role] || rawScore;
    return Math.min(rawScore, maxScore);
  };

  const handleSubmit = async () => {
    const userData = JSON.parse(localStorage.getItem("userData"));
    const department = userData.dept;
    const user_id = userData._id;

    if (!department || !user_id) {
      alert("Department and User ID are required. Please login again.");
      return;
    }

    const payload = {
      papers: {
        sci: { 
          count: Number(formData.sciPapers), 
          proof: proofLinks.sciPapers || "NA"
        },
        esci: { 
          count: Number(formData.esciPapers), 
          proof: proofLinks.esciPapers || "NA"
        },
        scopus: { 
          count: Number(formData.scopusPapers), 
          proof: proofLinks.scopusPapers || "NA"
        },
        ugc: { 
          count: Number(formData.ugcPapers), 
          proof: proofLinks.ugcPapers || "NA"
        },
        other: { 
          count: Number(formData.otherPapers), 
          proof: proofLinks.otherPapers || "NA"
        },
        marks: calculatePapersScore(),
      },
      conferences: {
        scopus: { 
          count: Number(formData.scopusConference), 
          proof: proofLinks.scopusConference || "NA"
        },
        other: { 
          count: Number(formData.otherConference), 
          proof: proofLinks.otherConference || "NA"
        },
        marks: calculateConferenceScore(),
      },
      bookChapters: {
        scopus: { count: Number(formData.scopusChapter), proof: proofLinks.scopusChapter || "NA" },
        other: { count: Number(formData.otherChapter), proof: proofLinks.otherChapter || "NA" },
        marks: calculateBookChapterScore(),
      },
      books: {
        scopus: { count: Number(formData.scopusBooks), proof: proofLinks.scopusBooks || "NA" },
        national: { count: Number(formData.nationalBooks), proof: proofLinks.nationalBooks || "NA" },
        local: { count: Number(formData.localBooks), proof: proofLinks.localBooks || "NA" },
        marks: calculateBookScore(),
      },
      citations: {
        wos: { count: Number(formData.wosCitations), proof: proofLinks.wosCitations || "NA" },
        scopus: { count: Number(formData.scopusCitations), proof: proofLinks.scopusCitations || "NA" },
        google: { count: Number(formData.googleCitations), proof: proofLinks.googleCitations || "NA" },
        marks: calculateCitationScore(),
      },
      patents: {
        individualCommercialized: { count: Number(formData.patentCommercialized), proof: proofLinks.patentCommercialized || "NA" },
        individualGranted: { count: Number(formData.patentGranted), proof: proofLinks.patentGranted || "NA" },
        collegeCommercialized: { count: Number(formData.patentCollege), proof: proofLinks.patentCollege || "NA" },
        collegeGranted: { count: Number(formData.patentCollegeGranted), proof: proofLinks.patentCollegeGranted || "NA" },
        marks: calculatePatentScore(),
      },
      training: {
        revenue: { amount: Number(formData.trainingRevenue), proof: proofLinks.trainingRevenue || "NA" },
        marks: calculateTrainingScore(),
      },
      nonResearchGrants: {
        amount: { value: Number(formData.nonResearchGrant), proof: proofLinks.nonResearchGrant || "NA" },
        marks: calculateNonResearchScore(),
      },
      products: {
        commercialized: { count: Number(formData.productCommercialized), proof: proofLinks.productCommercialized || "NA" },
        developed: { count: Number(formData.productDeveloped), proof: proofLinks.productDeveloped || "NA" },
        poc: { count: Number(formData.pocDeveloped), proof: proofLinks.pocDeveloped || "NA" },
        marks: calculateProductScore(),
      },
      awards: {
        international: { count: Number(formData.internationalAward), proof: proofLinks.internationalAward || "NA" },
        government: { count: Number(formData.governmentAward), proof: proofLinks.governmentAward || "NA" },
        national: { count: Number(formData.nationalAward), proof: proofLinks.nationalAward || "NA" },
        internationalFellowship: { count: Number(formData.internationalFellowship), proof: proofLinks.internationalFellowship || "NA" },
        nationalFellowship: { count: Number(formData.nationalFellowship), proof: proofLinks.nationalFellowship || "NA" },
        marks: calculateAwardScore(),
      },
      grantsAndRevenue: {
        researchGrants: { amount: Number(formData.researchGrants), proof: proofLinks.researchGrants || "NA" },
        consultancyRevenue: { amount: Number(formData.consultancyRevenue), proof: proofLinks.consultancyRevenue || "NA" },
        patentCommercialRevenue: { amount: Number(formData.patentCommercialRevenue), proof: proofLinks.patentCommercialRevenue || "NA" },
        productCommercialRevenue: { amount: Number(formData.productCommercialRevenue), proof: proofLinks.productCommercialRevenue || "NA" },
        startupRevenue: { amount: Number(formData.startupRevenue), proof: proofLinks.startupRevenue || "NA" },
        startupFunding: { amount: Number(formData.startupFunding), proof: proofLinks.startupFunding || "NA" },
        marks: calculateGrantsAndRevenueScore(),
      },
      startupPCCOE: {
        revenue: { amount: Number(formData.startupRevenuePCCOE), proof: proofLinks.startupRevenuePCCOE || "NA" },
        funding: { amount: Number(formData.startupFundingPCCOE), proof: proofLinks.startupFundingPCCOE || "NA" },
        products: { count: Number(formData.startupProductsPCCOE), proof: proofLinks.startupProductsPCCOE || "NA" },
        poc: { count: Number(formData.startupPOCPCCOE), proof: proofLinks.startupPOCPCCOE || "NA" },
        registered: { count: Number(formData.startupRegisteredPCCOE), proof: proofLinks.startupRegisteredPCCOE || "NA" },
        marks: calculateStartupPCCOEScore(),
      },
      industryInteraction: {
        activeMOU: { count: Number(formData.activeMOU), proof: proofLinks.activeMOU || "NA" },
        labDevelopment: { count: Number(formData.labDevelopment), proof: proofLinks.labDevelopment || "NA" },
        marks: calculateIndustryInteractionScore(),
      },
      industryAssociation: {
        internshipsAndPlacements: { count: Number(formData.industryInternshipPlacement), proof: proofLinks.industryInternshipPlacement || "NA" },
        marks: calculateIndustryAssociationScore(),
      },
      total_marks: calculateTotalScore(),
    };

    try {
      const response = await fetch(
        `http://127.0.0.1:5000/${department}/${user_id}/B`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(payload),
        }
      );

      if (response.ok) {
        navigate('/submission-status', { 
          state: { 
            status: 'success',
            formName: 'Research Form',
            message: 'Your Research details have been successfully submitted!'
          }
        });
      } else {
        throw new Error(errorData.error || "Failed to submit data");
      }
    } catch (error) {
      navigate('/submission-status', { 
        state: { 
          status: 'error',
          formName: 'Research Form',
          error: error.message
        }
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <ClipLoader color="#4F46E5" size={50} />
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8 bg-gray-50 min-h-screen">
      {/* Papers Section */}
      <SectionCard
        title="Research Papers"
        icon="📄"
        borderColor="border-blue-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="SCI/SCIE Journal Papers (WoS)"
            name="sciPapers"
            value={formData.sciPapers}
            onChange={handleChange}
            proof={proofLinks.sciPapers}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
          <InputField
            label="ESCI Journal Papers (WoS)"
            name="esciPapers"
            value={formData.esciPapers}
            onChange={handleChange}
            proof={proofLinks.esciPapers}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
          <InputField
            label="Scopus Journal Papers"
            name="scopusPapers"
            value={formData.scopusPapers}
            onChange={handleChange}
            proof={proofLinks.scopusPapers}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
          <InputField
            label="UGC CARE Listed Papers"
            name="ugcPapers"
            value={formData.ugcPapers}
            onChange={handleChange}
            proof={proofLinks.ugcPapers}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
          <InputField
            label="Other Journal Papers"
            name="otherPapers"
            value={formData.otherPapers}
            onChange={handleChange}
            proof={proofLinks.otherPapers}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
        </div>
        <ScoreCard
          label="Papers Score"
          score={calculatePapersScore()}
          total="No limit"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.papers || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Conference Papers Section */}
      <SectionCard
        title="Conference Papers"
        icon="🎯"
        borderColor="border-purple-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Scopus/WoS Indexed Conference Papers"
            name="scopusConference"
            value={formData.scopusConference}
            onChange={handleChange}
            proof={proofLinks.scopusConference}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
          <InputField
            label="Other Conference Papers"
            name="otherConference"
            value={formData.otherConference}
            onChange={handleChange}
            proof={proofLinks.otherConference}
            onProofChange={handleProofChange}
            placeholder="Number of papers"
          />
        </div>
        <ScoreCard
          label="Conference Papers Score"
          score={calculateConferenceScore()}
          total="180"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.conference || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Book Chapters Section */}
      <SectionCard
        title="Book Chapters"
        icon="📚"
        borderColor="border-yellow-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Scopus/WoS Indexed Book Chapters"
            name="scopusChapter"
            value={formData.scopusChapter}
            onChange={handleChange}
            proof={proofLinks.scopusChapter}
            onProofChange={handleProofChange}
            placeholder="Number of chapters"
          />
          <InputField
            label="Other Book Chapters"
            name="otherChapter"
            value={formData.otherChapter}
            onChange={handleChange}
            proof={proofLinks.otherChapter}
            onProofChange={handleProofChange}
            placeholder="Number of chapters"
          />
        </div>
        <ScoreCard
          label="Book Chapters Score"
          score={calculateBookChapterScore()}
          total="150"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.bookChapters || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Books Section */}
      <SectionCard
        title="Books Published"
        icon="📖"
        borderColor="border-red-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Scopus/WoS Indexed Books"
            name="scopusBooks"
            value={formData.scopusBooks}
            onChange={handleChange}
            proof={proofLinks.scopusBooks}
            onProofChange={handleProofChange}
            placeholder="Number of books"
          />
          <InputField
            label="International/National Publisher Books"
            name="nationalBooks"
            value={formData.nationalBooks}
            onChange={handleChange}
            proof={proofLinks.nationalBooks}
            onProofChange={handleProofChange}
            placeholder="Number of books"
          />
          <InputField
            label="Local Publisher Books"
            name="localBooks"
            value={formData.localBooks}
            onChange={handleChange}
            proof={proofLinks.localBooks}
            onProofChange={handleProofChange}
            placeholder="Number of books"
          />
        </div>
        <ScoreCard
          label="Books Score"
          score={calculateBookScore()}
          total="200"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.books || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Citations Section */}
      <SectionCard
        title="Citations (Last 3 Years)"
        icon="📊"
        borderColor="border-indigo-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Web of Science Citations"
            name="wosCitations"
            value={formData.wosCitations}
            onChange={handleChange}
            proof={proofLinks.wosCitations}
            onProofChange={handleProofChange}
            placeholder="Number of citations"
          />
          <InputField
            label="Scopus Citations"
            name="scopusCitations"
            value={formData.scopusCitations}
            onChange={handleChange}
            proof={proofLinks.scopusCitations}
            onProofChange={handleProofChange}
            placeholder="Number of citations"
          />
          <InputField
            label="Google Scholar Citations"
            name="googleCitations"
            value={formData.googleCitations}
            onChange={handleChange}
            proof={proofLinks.googleCitations}
            onProofChange={handleProofChange}
            placeholder="Number of citations"
          />
        </div>
        <ScoreCard
          label="Citations Score"
          score={calculateCitationScore()}
          total="50"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.citations || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Patents Section */}
      <SectionCard title="Patents" icon="📜" borderColor="border-orange-500">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Individual Patents Commercialized"
            name="patentCommercialized"
            value={formData.patentCommercialized}
            onChange={handleChange}
            proof={proofLinks.patentCommercialized}
            onProofChange={handleProofChange}
            placeholder="Number of patents"
          />
          <InputField
            label="Individual Patents Granted"
            name="patentGranted"
            value={formData.patentGranted}
            onChange={handleChange}
            proof={proofLinks.patentGranted}
            onProofChange={handleProofChange}
            placeholder="Number of patents"
          />
          <InputField
            label="College Patents Commercialized"
            name="patentCollege"
            value={formData.patentCollege}
            onChange={handleChange}
            proof={proofLinks.patentCollege}
            onProofChange={handleProofChange}
            placeholder="Number of patents"
          />
          <InputField
            label="College Patents Granted"
            name="patentCollegeGranted"
            value={formData.patentCollegeGranted}
            onChange={handleChange}
            proof={proofLinks.patentCollegeGranted}
            onProofChange={handleProofChange}
            placeholder="Number of patents"
          />
        </div>
        <ScoreCard
          label="Patents Score"
          score={calculatePatentScore()}
          total="220"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.patents || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Training and Revenue Section */}
      <SectionCard
        title="Training and Revenue"
        icon="💰"
        borderColor="border-teal-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Training Revenue (in 10k INR)"
            name="trainingRevenue"
            value={formData.trainingRevenue}
            onChange={handleChange}
            proof={proofLinks.trainingRevenue}
            onProofChange={handleProofChange}
            placeholder="Amount in 10k INR"
          />
          <InputField
            label="Non-Research Grant (in 10k INR)"
            name="nonResearchGrant"
            value={formData.nonResearchGrant}
            onChange={handleChange}
            proof={proofLinks.nonResearchGrant}
            onProofChange={handleProofChange}
            placeholder="Amount in 10k INR"
          />
        </div>
        <ScoreCard
          label="Training Revenue Score"
          score={calculateTrainingScore()}
          total="40"
        />
        <ScoreCard
          label="Non-Research Grant Score"
          score={calculateNonResearchScore()}
          total="40"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.training || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Products Section */}
      <SectionCard
        title="Products Developed"
        icon="🛠️"
        borderColor="border-pink-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Products Commercialized"
            name="productCommercialized"
            value={formData.productCommercialized}
            onChange={handleChange}
            proof={proofLinks.productCommercialized}
            onProofChange={handleProofChange}
            placeholder="Number of products"
          />
          <InputField
            label="Products Developed"
            name="productDeveloped"
            value={formData.productDeveloped}
            onChange={handleChange}
            proof={proofLinks.productDeveloped}
            onProofChange={handleProofChange}
            placeholder="Number of products"
          />
          <InputField
            label="POC Developed"
            name="pocDeveloped"
            value={formData.pocDeveloped}
            onChange={handleChange}
            proof={proofLinks.pocDeveloped}
            onProofChange={handleProofChange}
            placeholder="Number of POCs"
          />
        </div>
        <ScoreCard
          label="Products Score"
          score={calculateProductScore()}
          total="100"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.products || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Awards Section */}
      <SectionCard
        title="Awards and Fellowships"
        icon="🏆"
        borderColor="border-amber-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="International Awards"
            name="internationalAward"
            value={formData.internationalAward}
            onChange={handleChange}
            proof={proofLinks.internationalAward}
            onProofChange={handleProofChange}
            placeholder="Number of awards"
          />
          <InputField
            label="Government Awards"
            name="governmentAward"
            value={formData.governmentAward}
            onChange={handleChange}
            proof={proofLinks.governmentAward}
            onProofChange={handleProofChange}
            placeholder="Number of awards"
          />
          <InputField
            label="National Awards"
            name="nationalAward"
            value={formData.nationalAward}
            onChange={handleChange}
            proof={proofLinks.nationalAward}
            onProofChange={handleProofChange}
            placeholder="Number of awards"
          />
          <InputField
            label="International Fellowships"
            name="internationalFellowship"
            value={formData.internationalFellowship}
            onChange={handleChange}
            proof={proofLinks.internationalFellowship}
            onProofChange={handleProofChange}
            placeholder="Number of fellowships"
          />
          <InputField
            label="National Fellowships"
            name="nationalFellowship"
            value={formData.nationalFellowship}
            onChange={handleChange}
            proof={proofLinks.nationalFellowship}
            onProofChange={handleProofChange}
            placeholder="Number of fellowships"
          />
        </div>
        <ScoreCard
          label="Awards Score"
          score={calculateAwardScore()}
          total="50"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.awards || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Grants and Revenue Section */}
      <SectionCard
        title="Grants and Revenue Generation"
        icon="💸"
        borderColor="border-emerald-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Research Project Grants (in Lakhs INR)"
            name="researchGrants"
            value={formData.researchGrants}
            onChange={handleChange}
            proof={proofLinks.researchGrants}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Consultancy Work Revenue (in Lakhs INR)"
            name="consultancyRevenue"
            value={formData.consultancyRevenue}
            onChange={handleChange}
            proof={proofLinks.consultancyRevenue}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Patent Commercialization Revenue (in Lakhs INR)"
            name="patentCommercialRevenue"
            value={formData.patentCommercialRevenue}
            onChange={handleChange}
            proof={proofLinks.patentCommercialRevenue}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Product Commercialization Revenue (in Lakhs INR)"
            name="productCommercialRevenue"
            value={formData.productCommercialRevenue}
            onChange={handleChange}
            proof={proofLinks.productCommercialRevenue}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Startup Revenue (in Lakhs INR)"
            name="startupRevenue"
            value={formData.startupRevenue}
            onChange={handleChange}
            proof={proofLinks.startupRevenue}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Startup Funding Received (in Lakhs INR)"
            name="startupFunding"
            value={formData.startupFunding}
            onChange={handleChange}
            proof={proofLinks.startupFunding}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
        </div>
        <ScoreCard
          label="Grants and Revenue Score"
          score={calculateGrantsAndRevenueScore()}
          total="No Limit"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.grantsAndRevenue || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* PCCOE-CIIL Startup Section */}
      <SectionCard
        title="Start Up with PCCoE-CIIL"
        icon="🚀"
        borderColor="border-cyan-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Startup Revenue (≥50k for 100 marks)"
            name="startupRevenuePCCOE"
            value={formData.startupRevenuePCCOE}
            onChange={handleChange}
            proof={proofLinks.startupRevenuePCCOE}
            onProofChange={handleProofChange}
            placeholder="Revenue in thousands"
          />
          <InputField
            label="Startup Funding Received (≥5 Lakhs for 100 marks)"
            name="startupFundingPCCOE"
            value={formData.startupFundingPCCOE}
            onChange={handleChange}
            proof={proofLinks.startupFundingPCCOE}
            onProofChange={handleProofChange}
            placeholder="Amount in Lakhs"
          />
          <InputField
            label="Products Developed under Startup (40 marks each)"
            name="startupProductsPCCOE"
            value={formData.startupProductsPCCOE}
            onChange={handleChange}
            proof={proofLinks.startupProductsPCCOE}
            onProofChange={handleProofChange}
            placeholder="Number of products"
          />
          <InputField
            label="POCs Developed under Startup (10 marks each)"
            name="startupPOCPCCOE"
            value={formData.startupPOCPCCOE}
            onChange={handleChange}
            proof={proofLinks.startupPOCPCCOE}
            onProofChange={handleProofChange}
            placeholder="Number of POCs"
          />
          <InputField
            label="Startups Registered (5 marks each)"
            name="startupRegisteredPCCOE"
            value={formData.startupRegisteredPCCOE}
            onChange={handleChange}
            proof={proofLinks.startupRegisteredPCCOE}
            onProofChange={handleProofChange}
            placeholder="Number of startups"
          />
        </div>
        <ScoreCard
          label="PCCOE-CIIL Startup Score"
          score={calculateStartupPCCOEScore()}
          total="No Limit"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.startupPCCOE || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Industry Interaction Section */}
      <SectionCard
        title="Industry Interaction Outcomes"
        icon="🤝"
        borderColor="border-violet-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Active MoUs with Industry/University (10 marks each)"
            name="activeMOU"
            value={formData.activeMOU}
            onChange={handleChange}
            proof={proofLinks.activeMOU}
            onProofChange={handleProofChange}
            placeholder="Number of active MoUs"
          />
          <InputField
            label="Labs Developed with Industry (20 marks each)"
            name="labDevelopment"
            value={formData.labDevelopment}
            onChange={handleChange}
            proof={proofLinks.labDevelopment}
            onProofChange={handleProofChange}
            placeholder="Number of labs developed"
          />
        </div>
        <ScoreCard
          label="Industry Interaction Score"
          score={calculateIndustryInteractionScore()}
          total="No Limit"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.industryInteraction || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* Industry Association Section */}
      <SectionCard
        title="Industry Association Outcomes"
        icon="🎓"
        borderColor="border-lime-500"
      >
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <InputField
            label="Internships/Placements Through Individual Efforts (10 marks each)"
            name="industryInternshipPlacement"
            value={formData.industryInternshipPlacement}
            onChange={handleChange}
            proof={proofLinks.industryInternshipPlacement}
            onProofChange={handleProofChange}
            placeholder="Number of internships/placements"
          />
        </div>
        <ScoreCard
          label="Industry Association Score"
          score={calculateIndustryAssociationScore()}
          total="No Limit"
        />
        <div className="mt-4 p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border-2 border-green-200">
          <div className="flex items-center justify-between">
            <span className="font-medium text-gray-700">
              Score After Verification:
            </span>
            <span className="text-lg font-bold text-green-600">
              {verifiedScores.industryAssociation || "Pending"}
            </span>
          </div>
        </div>
      </SectionCard>

      {/* ... Similar sections for Conferences, Books, Citations, etc. */}

      {/* Total Score Section */}
      <div className="mt-8 bg-white rounded-lg shadow-md">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">
            Total Research Score
          </h2>
        </div>
        <div className="p-6">
          <div className="p-4 bg-gradient-to-r from-blue-100 to-blue-200 rounded-lg">
            <div className="flex justify-between items-center">
              <span className="text-xl font-semibold text-gray-800">
                Total Score:
              </span>
              <span className="text-3xl font-bold text-blue-700">
                {calculateTotalScore()}
              </span>
            </div>
            <div className="mt-2 text-sm text-gray-600">
              Maximum score for {userData.role}:{" "}
              {userData.role === "Professor"
                ? "370"
                : userData.role === "Associate Professor"
                  ? "300"
                  : userData.role === "Assistant Professor"
                    ? "210"
                    : "N/A"}
            </div>
            {calculateTotalScore() >
              (userData.role === "Professor"
                ? 370
                : userData.role === "Associate Professor"
                  ? 300
                  : userData.role === "Assistant Professor"
                    ? 210
                    : Infinity) && (
              <div className="mt-2 text-sm text-orange-600">
                Note: Score has been capped according to your role's maximum
                limit
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Submit Button */}
      <div className="flex justify-end mt-8">
        <button
          onClick={handleSubmit}
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 transition-colors duration-300"
        >
          Submit Research Details
        </button>
      </div>
    </div>
  );
};

export default Research;